<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="980" height="400" minWidth="980" minHeight="400" initialize="initApp()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<s:Group horizontalCenter="0" verticalCenter="0">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<!--
		<s:Group width="100%">
			<s:Rect width="100%" height="100%">
				<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
			</s:Rect>
			<s:HGroup paddingBottom="10" paddingTop="10" paddingLeft="10" >
				<s:Label>服务器地址：</s:Label>
				<s:TextInput id="txtIpAddr" width="480">rtmp://p2p.walkwork.net/quick_server/</s:TextInput>
				<s:Button id="btnConnect" click="connect()">Connect</s:Button>
				<s:Label>User ID：</s:Label>
				<s:TextInput id="txtUserId" width="140">18652970325</s:TextInput>
			</s:HGroup>
		</s:Group>
		-->
		<s:HGroup>
			<s:Group>
				<s:Rect width="100%" height="100%">
					<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
				</s:Rect>
				<s:VGroup>
					<s:Button id="btnMyVideo" width="144" click="open_close_my_video()">打开我的视频</s:Button>
					<s:VideoDisplay id="myVideoDisplay" x="50" y="50" width="144" height="192"/>
					<s:Label id="lblMessage">状态信息</s:Label>
				</s:VGroup>
			</s:Group>
			<s:Group>
				<s:Rect width="100%" height="100%">
					<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
				</s:Rect>			
				<s:VGroup>
					<s:DropDownList dataProvider="{_remoteVideoList}" width="270" prompt="请选择要观看的视频" 
									 change="playSelectedVideo(event, remoteVideoDisplay2)">
					</s:DropDownList>
					<s:VideoDisplay id="remoteVideoDisplay2" x="50" y="50" width="270" height="360"/>
				</s:VGroup>
			</s:Group>
			<s:Group>
				<s:Rect width="100%" height="100%">
					<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
				</s:Rect>
				<s:VGroup>
					<s:DropDownList dataProvider="{_remoteVideoList}" width="270" prompt="请选择要观看的视频" 
									change="playSelectedVideo(event, remoteVideoDisplay3)">
					</s:DropDownList>					
					<s:VideoDisplay id="remoteVideoDisplay3" x="50" y="50" width="270" height="360" />
				</s:VGroup>
			</s:Group>	
			<s:Group>
				<s:Rect width="100%" height="100%">
					<s:fill><s:SolidColor color="0xCCCCCC" /></s:fill>
				</s:Rect>
				<s:VGroup>
					<s:DropDownList dataProvider="{_remoteVideoList}" width="270" prompt="请选择要观看的视频" 
									change="playSelectedVideo(event, remoteVideoDisplay4)">
					</s:DropDownList>					
					<s:VideoDisplay id="remoteVideoDisplay4" x="50" y="50" width="270" height="360"/>
				</s:VGroup>	
			</s:Group>
		</s:HGroup>	
	
	</s:Group>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			
			private var _rtmp_uri:String = null;
			private var _user_id:String = null;
			
			private var _camera:Camera = null;
			private var _conn:NetConnection = null;	
			
			private var _myVideo:Video = null;
			private var _myStream:NetStream = null;
			private var _isMyVideoOpen:Boolean = false;
			
			private var _videoDisplay2StreamArray:Object;
			private var _videoDisplay2StreamIdArray:Object;
			
			[Bindable]
			private var _remoteVideoList:ArrayCollection = null;
			
			private function initApp():void {
				ExternalInterface.addCallback("flexAddUserToVideoList", addUserToVideoList);
				ExternalInterface.addCallback("flexRemoveUserFromVideoList", removeUserFromVideoList);
				
				var videoOnArray:Array = [];
				try {
					_rtmp_uri = ExternalInterface.call("js_getRTMPUri");
					_user_id = ExternalInterface.call("js_getUserId");
					videoOnArray = ExternalInterface.call("js_getVideoOnAttendees");
				} catch (e:Error) {
					Alert.show("Error : " + e.message);
				} catch (e:SecurityError) {
					Alert.show("SecurityError : " +e.message);
				}
				
				if (null == _rtmp_uri){
					Alert.show("无效的视频服务器地址");
					return;
				}
				
				if (null == _user_id){
					Alert.show("无效的视频用户名");
					return;
				}
				
				_videoDisplay2StreamIdArray = new Object();
				_remoteVideoList = new ArrayCollection();
//				_remoteVideoList.addItem({label:"", data:""});
				for (var i:int=0; i<videoOnArray.length; i++){
					_remoteVideoList.addItem({label:videoOnArray[i], data:videoOnArray[i]});
				}
				
				connect();
			}
			
			private function connect():void{
				if (null == _conn){
					_conn = new NetConnection();
					_conn.addEventListener(NetStatusEvent.NET_STATUS, eventHandler);
					_conn.client={streamListMessage : function(obj:Object):void{}};
				}
				
				if (_conn.connected){
					return;
				}
				
				try{
					_conn.connect(_rtmp_uri, _user_id);
				}catch (e:ArgumentError){
					trace("Incorrect connet URL");
				}
			}
			
			private function eventHandler(event:NetStatusEvent):void {
				trace("Net Status Event : " + event.info.code);
				switch (event.info.code) {
					case "NetConnection.Connect.Success":
						lblMessage.text = "连接服务器成功";
						onConnectSuccess();
						break;
					case "NetConnection.Connect.Failed":
						lblMessage.text = "连接服务器失败";
						break;
					case "NetConnection.Connect.Closed":
						lblMessage.text = "服务器连接关闭";
						break;
					case "NetConnection.Connect.NetworkChange":
						lblMessage.text = "NetworkChange";
						break;
					case "NetStream.Play.PublishNotify":
//						onPublishNotify(event);
						lblMessage.text = "视频已打开：" + event.info.details;
						break;
					case "NetStream.Play.UnpublishNotify":
//						onUnpublishNotify(event);
						lblMessage.text = "视频已关闭：" + event.info.details;
						break;
					default:
						break;		
				}
			}
			
			private function showEventInfo(eventInfo:Object):void {
				var info:String = "";
				for (var prop:Object in eventInfo) {
					info += "\n"+prop+":\t"+ eventInfo[prop];
				}
				Alert.show(info);
			}
			
			private function onConnectSuccess():void {
				_videoDisplay2StreamArray = new Object();
				for (var i:int=2; i<5; i++){
					var remoteStream:NetStream = new NetStream(_conn);
					remoteStream.addEventListener(NetStatusEvent.NET_STATUS, eventHandler);
					remoteStream.client = {onMetaData:function(obj:Object):void{  } }
					
					var remoteVideoDisplay:VideoDisplay = this["remoteVideoDisplay" + i];
					var video:Video = new Video(remoteVideoDisplay.width, remoteVideoDisplay.height);
					video.smoothing = true;
					video.attachNetStream(remoteStream);
					remoteVideoDisplay.addChild(video);
					
					_videoDisplay2StreamArray[remoteVideoDisplay.id] = remoteStream;
				}
			}
			
			private function onPublishNotify(event:NetStatusEvent):void {
				var eventInfo:Object = event.info;
				var streamId:String = eventInfo["details"];
				addUserToVideoList(streamId, streamId);
			}
			
			private function addUserToVideoList(userName:String, streamId:String):void {
				_remoteVideoList.addItem({label:userName, data:streamId});
			}
			
			private function onUnpublishNotify(event:NetStatusEvent):void {
				var eventInfo:Object = event.info;
				var streamId:String = eventInfo["details"];
				removeUserFromVideoList(streamId);
			}
			
			private function removeUserFromVideoList(streamId:String):void {
				var removedItemList:Array = [];
				for (var i:int=0; i<_remoteVideoList.length; i++){
					if (_remoteVideoList.getItemAt(i).data == streamId){
						removedItemList.push(i);
					}
				}
				for (var k:int=0; k<removedItemList.length; k++){
					var index:int = removedItemList[k];
					_remoteVideoList.removeItemAt(index);
				}
				for (var vd:String in _videoDisplay2StreamIdArray){
					var sid:String = _videoDisplay2StreamIdArray[vd];
					if (sid == streamId) {
						var stream:NetStream = _videoDisplay2StreamArray[vd];
						stream.close();
					}
				}
			}
			
			private function open_close_my_video():void {
				if (!_conn.connected){
					Alert.show("视频服务器未连接！");
					return;
				}
				
				if (_isMyVideoOpen) {
					closeMyVideo();
					unpublishMyVideo();
					_isMyVideoOpen = false;
					btnMyVideo.label = "打开我的视频";
				} else {
					_isMyVideoOpen = openMyVideo();
					if (_isMyVideoOpen){
						publishMyVideo();
						btnMyVideo.label = "关闭我的视频";
					}
				}
			}
			
			private function openMyVideo():Boolean {
				if (Camera.names.length <= 0) { 
					Alert.show("没有可用的摄像头！");
					return false;
				}
				
				if (null == _camera){
					var width:int = 144;
					var height:int = 192;
					var fps:int = 10;
					
					_camera = Camera.getCamera();
					_camera.addEventListener(StatusEvent.STATUS, cameraEventHandler);
					_camera.setMode(width, height, fps);
					
					_myVideo = new Video(myVideoDisplay.width,myVideoDisplay.height);
					_myVideo.attachCamera(_camera);
				}
				
				if (_camera && _myVideo){
					myVideoDisplay.addChild(_myVideo);
					return true;
				} else {
					Alert.show("获取摄像头失败！");
					return false;
				}
			}
			
			private function closeMyVideo():void {
				if (null != _myVideo){
					myVideoDisplay.removeChild(_myVideo);
				}
			}
			
			private function cameraEventHandler(event:StatusEvent):void {
				trace("Camera Event:" + event.code);
			}	
			
			private function publishMyVideo():void {
				if (null == _myStream){
					_myStream = new NetStream(_conn);
					_myStream.addEventListener(NetStatusEvent.NET_STATUS, eventHandler);
					
					var h264Settings:H264VideoStreamSettings = new H264VideoStreamSettings();
					h264Settings.setProfileLevel(H264Profile.BASELINE, H264Level.LEVEL_1_3);
					_myStream.videoStreamSettings = h264Settings;
					
					_myStream.attachCamera(_camera);
					_myStream.publish(_user_id, "live");
				} else {
					_myStream.publish(_user_id, "live");
				}
			}
			
			private function unpublishMyVideo():void {
				if (null != _myStream){
					_myStream.close();
				}
			}
			
			private function playSelectedVideo(event:Event, videoDisplay:VideoDisplay):void {
				var stream:NetStream = _videoDisplay2StreamArray[videoDisplay.id];
				if (null != stream){
					stream.close();
					var streamId:String = event.target.selectedItem.data;
					stream.play(streamId);
					_videoDisplay2StreamIdArray[videoDisplay.id] = streamId;
				}
			}
			
		]]>
	</fx:Script>	
</s:Application>
